1. Terminal (packages):
pnpm install fastify
pnpm install prisma
pnpm install zod
pnpm install @fastify/cors
pnpm install fastify-zod


2. Create the file docker-compose.yml in our project-folder and...
...copy paste  into this file:

```
version: "3.8"

volumes:
  pgsql-datata:

services:
  postgresql:
    image: postgres:latest
    restart: unless-stopped
    container_name: pgsql-cinema
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - type: volume
        source: pgsql-datata
        target: /var/lib/postgresql/data
```

3. Create file .env in root folder and copy-paste into this file:

```
POSTGRES_USER=local_admin
POSTGRES_PASSWORD=unsafeLocalPassword0!
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_DB=main

DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?schema=public&connect_timeout=300
```

3. Create and run or run Docker Container in Terminal:
`docker compose up`


4. Now create a file for fastify instance called server.ts in a Folder called server (the latter You create in our project folder).
Copypaste:

```
declare module "fastify" {
  interface FastifyInstance {
    readonly zod: FastifyZod<typeof models>;
  }
}

const prisma = new PrismaClient();
```


5. Now create a schema.prisma-file in prisma-Folder, that You created in the project folder. Copy-paste:

```
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
```

6. Define schemas suitable for Your purpose in schema.prisma

7. To create the db-Structure according to the schema.prisma-File (if not done yet) run in Terminal
`prisma db push`

8. To run the local server:
`npm run server`

9. To test the setup create a test.http file and copy-paste:

```POST http://localhost:3000/auth/login
Content-Type: application/json

{
    "email": "default@gmal.com",
    "password": "jkahjakjsds1122"
}```

10. TO RESET via Terminal:

```
docker compose down
docker volume prune
docker compose up -d
npx prisma db push
npm run server
```


HOW DOES THIS SETUP WORK?


I. In package.json we should already have:

```
"scripts": {
    "server": "node --experimental-specifier-resolution=node --loader ts-node/esm ./server/server.ts",
    [other scripts]
    }
```

->  This is to run node, specify (--exper...) --loader (has an argument ts-node/esm to specify the loader)
->  ...we need this to make our setting (vite for Frontend) and backend (node) compatible, node is a JS interpreter


II. What does docker-compose.yml do?

Defines container that we run, when we give the terminal command
`docker compose up`
or
`docker compose run`


III. What does .env do?

.env contains keys, password etc. ("environment variables") (should always be mentioned in gitIgnore).

`POSTGRES_USER=local_admin
POSTGRES_PASSWORD=unsafeLocalPassword0!`
->  Postgres SQL expects us to set it, will use default values otherwise

`POSTGRES_HOST=localhost
POSTGRES_PORT=5432`

->  This is the port we defined in docker-compose.yml
`POSTGRES_DB=main`

`DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?schema=public&connect_timeout=300`
->  This is a path to reach out to our DB. Browsers don't understand postgresql, we can use it with any program (db viewers) like Prisma do.


HTTP Errors Documentation:
https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#successful_responses